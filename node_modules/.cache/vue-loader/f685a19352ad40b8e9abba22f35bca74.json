{"remainingRequest":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/src/components/common/Affix/Affix.vue?vue&type=style&index=0&id=dd6c4c06&scoped=true&lang=css&","dependencies":[{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/src/components/common/Affix/Affix.vue","mtime":1624322764000},{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/css-loader/dist/cjs.js","mtime":1639105455649},{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1639105456041},{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/postcss-loader/src/index.js","mtime":1639105455763},{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/cache-loader/dist/cjs.js","mtime":1639105455449},{"path":"/Users/huangweiji/Desktop/code/git_project/-Dragon-Boat-Festival/node_modules/vue-loader/lib/index.js","mtime":1639105455859}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFmZml4IHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgei1pbmRleDogOTk5OwogIHdpZHRoOiAxMDB2dzsKfQo="},{"version":3,"sources":["Affix.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AACA;AACA;AACA;AACA","file":"Affix.vue","sourceRoot":"src/components/common/Affix","sourcesContent":["<template>\n  <div class=\"affix-placeholder\" :style=\"wrapStyle\">\n    <div :class=\"{ affix: affixed }\" :style=\"styles\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n<script>\n/**\n * 固钉\n */\nexport default {\n  props: {\n    offset: {\n      type: Number,\n      default: 0,\n    },\n    onAffix: {\n      type: Function,\n      default() {},\n    },\n    boundary: {\n      type: String,\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      affixed: false,\n      styles: {},\n      affixedClientHeight: 0,\n      wrapStyle: {},\n    };\n  },\n  methods: {\n    getScroll(w, top) {\n      let ret = w[`page${top ? \"Y\" : \"X\"}Offset`];\n      const method = `scroll${top ? \"Top\" : \"Left\"}`;\n      if (typeof ret !== \"number\") {\n        const d = w.document;\n        // ie6,7,8 \n        ret = d.documentElement[method];\n        if (typeof ret !== \"number\") {\n          ret = d.body[method];\n        }\n      }\n      return ret;\n    },\n    getOffset(element) {\n      const rect = element.getBoundingClientRect();\n      const body = document.body;\n      const clientTop = element.clientTop || body.clientTop || 0;\n      const clientLeft = element.clientLeft || body.clientLeft || 0;\n      // const clientHeight = element.clientHeight || 0;\n      const scrollTop = this.getScroll(window, true);\n      const scrollLeft = this.getScroll(window);\n      return {\n        top: rect.bottom + scrollTop - clientTop - this.affixedClientHeight,\n        left: rect.left + scrollLeft - clientLeft,\n      };\n    },\n    handleScroll() {\n      const scrollTop = this.getScroll(window, true) + this.offsets; \n      const elementOffset = this.getOffset(this.$el);\n      if (!this.affixed && scrollTop > elementOffset.top) {\n        this.affixed = true;\n        this.styles = {\n          top: `${this.offsets}px`,\n          left: `${elementOffset.left}px`,\n        };\n        this.onAffix(this.affixed);\n      }\n      // \n      if (this.boundary && scrollTop > elementOffset.top) {\n        const el = document.getElementById(this.boundary.slice(1));\n        if (el) {\n          const boundaryOffset = this.getOffset(el);\n          if (scrollTop + this.offsets > boundaryOffset.top) {\n            const top = scrollTop - boundaryOffset.top;\n            this.styles.top = `-${top}px`;\n          }\n        }\n      }\n      if (this.affixed && scrollTop < elementOffset.top) {\n        this.affixed = false;\n        this.styles = {};\n        this.onAffix(this.affixed);\n      }\n      if (this.affixed && this.boundary) {\n        const el = document.getElementById(this.boundary.slice(1));\n        if (el) {\n          const boundaryOffset = this.getOffset(el);\n          if (scrollTop + this.offsets <= boundaryOffset.top) {\n            this.styles.top = 0;\n          }\n        }\n      }\n    },\n  },\n  computed: {\n    offsets() {\n      if (this.boundary) {\n        return 0;\n      }\n      return this.offset;\n    },\n  },\n  mounted() {\n    this.affixedClientHeight = this.$el.children[0].clientHeight;\n    this.wrapStyle = { height: `${this.affixedClientHeight}px` };\n    window.addEventListener(\"scroll\", this.handleScroll);\n    window.addEventListener(\"resize\", this.handleScroll);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n    window.removeEventListener(\"resize\", this.handleScroll);\n  },\n};\n</script>\n<style scoped>\n.affix {\n  position: fixed;\n  z-index: 999;\n  width: 100vw;\n}\n</style>"]}]}